# –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≥
import telebot
from telebot import types
from config import TELEGRAM_TOKEN

from free_search import perform_pixabay_search
from ultimate_search import perform_google_reverse_image_search
from yandex_search import perform_yandex_reverse_image_search
from db import init_db, can_use_search, update_usage

init_db()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è Telegram
bot = telebot.TeleBot(TELEGRAM_TOKEN)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help_command(message):
    help_message = (
        "–ö–æ–º–∞–Ω–¥–∞ üí´ –ü–æ–∏—Å–∫ Royalty Free –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∏—Å–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ "
        "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ü–æ–∏—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ üí´ –ü–æ–∏—Å–∫ Google Reverse Images —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ üí´ –ü–æ–∏—Å–∫ Yandex Reverse Images —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ.\n\n"
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥–∞.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö üîé ,–∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö/–ª–∏—á–Ω—ã—Ö —Ü–µ–ª—è—Ö üîê\n\n"
        "–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /start\n\n"
        "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –º–Ω–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ—Å–µ—Ç–∏–≤: https://github.com/rumiantsevaa/Bloodhound_Telegram_Bot"
    )
    bot.send_message(message.chat.id, help_message)


@bot.message_handler(commands=['start', 'help'])
def start(message):
    start_message = (
        "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç Bloodhound, —è —Å–∫—Ä–æ–º–Ω—ã–π –±–æ—Ç –∏—â–µ–π–∫–∞üîé.\n"
        "–†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –±–æ–ª—å—à–µ.\n\n"
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ üñ•\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üîê\n"
        "–ü—Ä–æ—à—É –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –±–æ—Ç–∞ üöÄüöÄüöÄ"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ–∏—Å–∫ Royalty Free –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    button2 = types.KeyboardButton("–ü–æ–∏—Å–∫ Google Reverse Images")
    button3 = types.KeyboardButton("–ü–æ–∏—Å–∫ Yandex Reverse Images")
    markup.add(button1, button2, button3)

    bot.send_message(message.chat.id, start_message, reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /yandexbhsearch
@bot.message_handler(commands=['yandexbhsearch'])
def yandex_bh_search(message):
    user_id = message.from_user.id
    if not can_use_search(user_id, 'yandex_reverse'):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞ üò¢")
        return
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    bot.register_next_step_handler(message, process_yandex_bh_search)


def process_yandex_bh_search(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # Check if the user sent a photo
    if not message.photo:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    # Get the file_id of the largest photo
    file_id = message.photo[-1].file_id

    # Get the file path using file_id
    file_path = bot.get_file(file_id).file_path

    # Construct the public URL for the photo
    photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"

    # Perform Yandex Reverse Image Search using SerpApi
    search_results = perform_yandex_reverse_image_search(photo_url)

    # Send the search results as separate messages
    for result in search_results:
        bot.send_message(chat_id, result)

    update_usage(user_id, 'yandex_reverse')  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    info_message = (
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ üñ•\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üîê \n"
        "–ü—Ä–æ—à—É –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –±–æ—Ç–∞ üöÄ\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    bot.send_message(chat_id, info_message)


# –ö–æ–º–∞–Ω–¥–∞ /ultimatebhsearch
@bot.message_handler(commands=['ultimatebhsearch'])
def ultimate_bh_search(message):
    user_id = message.from_user.id
    if not can_use_search(user_id, 'google_reverse'):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞ üò¢")
        return
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    bot.register_next_step_handler(message, process_ultimate_bh_search)


def process_ultimate_bh_search(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # Check if the user sent a photo
    if not message.photo:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    # Get the file_id of the largest photo
    file_id = message.photo[-1].file_id

    # Get the file path using file_id
    file_path = bot.get_file(file_id).file_path

    # Construct the public URL for the photo
    photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"

    # Perform Google Reverse Image Search
    search_results = perform_google_reverse_image_search(photo_url)

    # Send the search results as separate messages
    for result in search_results:
        bot.send_message(chat_id, result)

    update_usage(user_id, 'google_reverse')  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    info_message = (
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ üñ•\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üîê \n"
        "–ü—Ä–æ—à—É –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –±–æ—Ç–∞ üöÄ\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    bot.send_message(chat_id, info_message)


# –ö–æ–º–∞–Ω–¥–∞ /freebhsearch
@bot.message_handler(commands=['freebhsearch'])
def free_bh_search(message):
    user_id = message.from_user.id
    if not can_use_search(user_id, 'pixabay'):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞ üò¢")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∂–µ–ª–∞–µ–º–æ–≥–æ royalty free —Ñ–æ—Ç–æ.")
    bot.register_next_step_handler(message, process_free_bh_search)


def process_free_bh_search(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    query = message.text

    # Check if the user provided a non-empty query
    if not query:
        bot.send_message(chat_id, "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    # Perform Pixabay search
    search_results = perform_pixabay_search(query)

    # Send each link as a separate message
    for result in search_results:
        bot.send_message(chat_id, result)

    update_usage(user_id, 'pixabay')  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    info_message = (
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ üñ•\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üîê \n"
        "–ü—Ä–æ—à—É –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –±–æ—Ç–∞ üöÄ\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    bot.send_message(chat_id, info_message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if message.text.lower() == '–ø–æ–∏—Å–∫ royalty free –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π':
        free_bh_search(message)
    elif message.text.lower() == '–ø–æ–∏—Å–∫ google reverse images':
        ultimate_bh_search(message)
    elif message.text.lower() == '–ø–æ–∏—Å–∫ yandex reverse images':
        yandex_bh_search(message)
    elif message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start")
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


# Start the bot polling
bot.polling(none_stop=True, interval=0)
